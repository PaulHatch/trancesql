---

image: docker:stable-git

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  LATEST_TAG: $CI_REGISTRY_IMAGE:latest
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

services:
  - docker:dind

before_script:
  - docker info
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - chmod +x init.sh

stages:
  - build
  - test
  - publish-preview
  - publish

Build:
    stage: build
    script: 
     - TAG=$(git describe --abbrev=0)
     - REV=$(git rev-list ${TAG}..HEAD --count)
     - VERSION="${TAG}.${REV}"
     - docker build --build-arg VERSION=${VERSION} -t $LATEST_TAG -t $IMAGE_TAG -t ${CI_REGISTRY_IMAGE}/build:latest .
     - docker push $IMAGE_TAG

Unit Tests:
    stage: test
    script:
     - docker pull $IMAGE_TAG
     - docker run --name testing $IMAGE_TAG --test
     - docker cp testing:/sln/results.xml .
    artifacts:
      reports:
        junit: results.xml

SQL Server Integration Tests:
    stage: test
    script: sh init.sh --integration $IMAGE_TAG sqlserver
    artifacts:
      reports:
        junit: results.xml

SQLite Integration Tests:
    stage: test
    script: 
      - sh init.sh --integration $IMAGE_TAG sqlite
      - EXIT_CODE=$($?)
      - echo #EXIT_CODE
      - exit $EXIT_CODE
    artifacts:
      reports:
        junit: results.xml

Postgres Integration Tests:
    stage: test
    script: sh init.sh --integration $IMAGE_TAG postgres
    artifacts:
      reports:
        junit: results.xml

MySQL Integration Tests:
    stage: test
    script: sh init.sh --integration $IMAGE_TAG mysql
    artifacts:
      reports:
        junit: results.xml


Publish Preview:
    stage: publish-preview
    script:
      - TAG=$(git describe --abbrev=0)
      - REV=$(git rev-list ${TAG}..HEAD --count)
      - VERSION="${TAG}-CI${REV}"
      - RELEASE_NOTES="$(git tag -l --format='%(contents)' ${TAG})"
      - docker pull $IMAGE_TAG
      - docker run --rm $IMAGE_TAG --publish $VERSION "$RELEASE_NOTES" --source $MYGET_URL --api-key $MYGET_KEY

Publish:
    stage: publish
    when: manual
    script:
      - TAG=$(git describe --abbrev=0)
      - REV=$(git rev-list ${TAG}..HEAD --count)
      - VERSION="${TAG}"
      - RELEASE_NOTES="$(git tag -l --format='%(contents)' ${TAG})"
      - docker pull $IMAGE_TAG
      - docker run --rm $IMAGE_TAG --publish $VERSION "$RELEASE_NOTES" --source $NUGET_URL --api-key $NUGET_KEY
    